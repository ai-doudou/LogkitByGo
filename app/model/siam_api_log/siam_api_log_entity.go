// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package siam_api_log

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table siam_api_log.
type Entity struct {
    Id           uint        `orm:"id,primary"    json:"id"`            //                                                       
    ProjectId    int         `orm:"project_id"    json:"project_id"`    // 所属项目id                                            
    ApiFull      string      `orm:"api_full"      json:"api_full"`      // api路径 = api类目."/".api方法                         
    ApiCategory  string      `orm:"api_category"  json:"api_category"`  // api类目                                               
    ApiMethod    string      `orm:"api_method"    json:"api_method"`    // api方法                                               
    ApiParam     string      `orm:"api_param"     json:"api_param"`     // api参数                                               
    ApiResponse  string      `orm:"api_response"  json:"api_response"`  // api响应                                               
    IsSuccess    uint        `orm:"is_success"    json:"is_success"`    // 成功|失败 1|0                                         
    ConsumeTime  int         `orm:"consume_time"  json:"consume_time"`  // 消耗时间 单位ms                                       
    UserFrom     string      `orm:"user_from"     json:"user_from"`     // 用户来源，可以填入ip、城市名、调用账号等类型          
    UserIdentify string      `orm:"user_identify" json:"user_identify"` // 用户标识，比如可以用订单号，结合来源，就可以定位请求  
    CreateDate   int         `orm:"create_date"   json:"create_date"`   // 记录日期  YYYYddmm                                    
    CreateTime   *gtime.Time `orm:"create_time"   json:"create_time"`   // 记录时间                                              
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}