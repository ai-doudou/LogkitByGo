// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package siam_abnormals

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table siam_abnormals.
type Entity struct {
    AbId            uint        `orm:"ab_id,primary"    json:"ab_id"`            //                                
    ProjectId       int         `orm:"project_id"       json:"project_id"`       // 所属项目id                     
    AbClass         string      `orm:"ab_class"         json:"ab_class"`         //                                
    AbDate          *gtime.Time `orm:"ab_date"          json:"ab_date"`          // 日期 用来索引统计数量          
    AbData          string      `orm:"ab_data"          json:"ab_data"`          // 数据 如get post head cookie等  
    AbFile          string      `orm:"ab_file"          json:"ab_file"`          // 异常文件                       
    AbLine          int         `orm:"ab_line"          json:"ab_line"`          // 异常所在文件行数               
    AbStack         string      `orm:"ab_stack"         json:"ab_stack"`         // call stack                     
    AbFileresources string      `orm:"ab_fileresources" json:"ab_fileresources"` // 文件资源 如果有的话            
    AbMessage       string      `orm:"ab_message"       json:"ab_message"`       // 异常消息                       
    CreateTime      *gtime.Time `orm:"create_time"      json:"create_time"`      // 创建时间                       
    UpdateTime      *gtime.Time `orm:"update_time"      json:"update_time"`      // 更新时间                       
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}